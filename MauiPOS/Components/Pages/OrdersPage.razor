@page "/orders"
@using MauiPOS.Data
@using MauiPOS.Models
@using MauiPOS.Repositories
@inject OrdersRepository OrdersRepo

<div class="flex flex-col h-full">
    <!-- Header -->
    <div class="flex justify-between items-center p-4 gradient-bg text-white rounded-t-lg">
        <div>
            <h1 class="text-3xl font-bold">Orders</h1>
            <p class="text-indigo-100">View and manage your past orders</p>
        </div>
    </div>

    <!-- Main Content: Split into Orders List and Details -->
    <div class="flex-1 flex overflow-hidden">
        <!-- Orders List (75%) -->
        <div class="w-3/4 overflow-y-auto p-2 bg-indigo-50 relative">
            <div class="space-y-2">
                <!-- Header Row -->
                <div class="grid grid-cols-[90px_1fr_1fr_1fr_1fr_1fr] bg-indigo-600 text-white font-bold text-sm p-2 rounded-t-lg">
                    <span class="pl-2">Order Id</span>
                    <span>Date</span>
                    <span>Amount Paid</span>
                    <span>Payment Mode</span>
                    <span>No. of Items</span>
                    <span></span>
                </div>
                <!-- Orders -->
                <div class="space-y-1">
                    @foreach (var order in orders)
                    {
                        <div @onclick="() => SelectOrder(order)" class="@(order.IsSelected ? "bg-indigo-200" : "bg-white") grid grid-cols-[90px_1fr_1fr_1fr_1fr_1fr] text-gray-700 text-sm p-2 hover:bg-indigo-100 cursor-pointer scale-appear">
                            <span class="pl-2 font-medium text-indigo-600">#@order.Id</span>
                            <span>@order.OrderDate.ToString("dd/MM/yyyy HH:mm:ss")</span>
                            <span>@order.TotalAmountPaid.ToString("C")</span>
                            <span>@order.PaymentMode</span>
                            <span class="text-blue-600 underline" title="Click to view details">@order.TotalItemsCount Item(s)</span>
                            <button @onclick:stopPropagation="true" @onclick="() => SelectOrder(order)" class="bg-teal-500 hover:bg-teal-600 text-white p-1 rounded text-sm transition-colors">View Details</button>
                        </div>
                    }
                </div>
                <!-- Loading Overlay -->
                @if (isLoading)
                {
                    <div class="absolute inset-0 bg-indigo-900 bg-opacity-50 flex items-center justify-center z-50">
                        <div class="flex flex-col items-center">
                            <div class="animate-spin h-10 w-10 border-4 border-yellow-400 border-t-transparent rounded-full"></div>
                            <p class="mt-4 text-white font-medium">Loading...</p>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Order Details (25%) -->
        <div class="w-1/4 bg-indigo-800 flex flex-col text-white">
            <!-- Details Header -->
            <div class="gradient-bg p-4 flex justify-between items-center">
                <h2 class="text-2xl font-bold text-center">Selected Order Items</h2>
                <button @onclick="() => SelectOrder(null)" class="bg-red-500 hover:bg-red-600 p-1 rounded-full transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>

            <!-- Order Items -->
            <div class="flex-1 overflow-y-auto p-3 space-y-3 bg-indigo-700 scrollbar-hide">
                @if (orderItems.Any())
                {
                    @foreach (var item in orderItems)
                    {
                        <div class="bg-indigo-600 p-3 rounded-lg scale-appear">
                            <div class="grid grid-cols-[80px_1fr] gap-3">
                                <div class="bg-indigo-500 rounded-lg flex items-center justify-center p-2">
                                    <img src="@item.Icon" alt="@item.Name" class="h-16 w-16 object-contain" />
                                </div>
                                <div class="space-y-2">
                                    <p class="font-bold text-white">@item.Name</p>
                                    <div class="flex justify-between">
                                        <span class="text-indigo-200">@item.Quantity x @item.Price.ToString("C")</span>
                                        <span class="font-bold text-yellow-300">@item.Amount.ToString("C")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="flex flex-col items-center justify-center h-full text-indigo-200">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2" />
                        </svg>
                        <p class="mt-4 font-bold text-xl">No Order Selected</p>
                        <p class="text-sm text-center">Select an order to view its details</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private OrderModel[] orders = Array.Empty<OrderModel>();
    private OrderItem[] orderItems = Array.Empty<OrderItem>();
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        orders = await OrdersRepo.GetOrdersAsync();
        isLoading = false;
    }

    private async Task SelectOrder(OrderModel? order)
    {
        isLoading = true;
        foreach (var o in orders) o.IsSelected = o == order;
        orderItems = order != null ? await OrdersRepo.GetOrderItemsByOrderIdAsync(order.Id) : Array.Empty<OrderItem>();
        isLoading = false;
    }
}